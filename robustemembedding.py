# -*- coding: utf-8 -*-
"""RobustEMEmbedding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hU7EDatbVAU1xvBmVE76Fwn7uwrMwM4d
"""

import pandas as pd
import numpy as np
from copy import deepcopy
#!pip install fasttext
#!pip install git+https://github.com/mx-hxh/butter-fingers.git@main#egg=butterfingers
import fasttext
from butterfingers import butterfingers
from datetime import datetime
import os
from random import randint
import random
import time
import zipfile
#from google.colab import drive
#drive.mount('/content/gdrive')

def load_data_2_compare(dataPaths):
  dataList = []
  for path in dataPaths:
    data = pd.read_csv(path, header = 0, engine = 'c').fillna(' ')
    data = data.astype(str)
    dataList.append(data) 
  return pd.concat(dataList).reset_index(drop = True)

def add_column_context(data):
  data = data.astype(str).apply(lambda x:x.name.replace('_',' ') + ': ' + x)
  return data

def get_typo_list(data, num=10, prob=0.1):
  typoList = []
  typoList.append(add_column_context(data))
  for n in range(0,num):
    dataTypo = deepcopy(data)
    for col in dataTypo.columns:
      dataTypo[col]=dataTypo[col].apply(butterfingers.butterfinger, args=(prob, 'querty'))
    dataTypo[data.columns[0]]=data[data.columns[0]]
    dataTypo = add_column_context(dataTypo)
    typoList.append(dataTypo)
  return typoList

def typo_list_2_file(typoList, directory):
  typoList = pd.concat(typoList)
  typoList.reset_index(drop = True, inplace = True)
  typoList.to_csv(directory, sep = ' ', header = False, index = False)

def typo_list_diff_iterations(iterationList, fileNameBase, folderDirectory, **kwargs):
  for iter in iterationList:
    filename = fileNameBase + str(iter) + '.txt'
    fileDirectory = folderDirectory + filename
    typoList = get_typo_list(**kwargs, num=iter)
    typo_list_2_file(typoList = typoList,directory = fileDirectory)
    print('store: ' + filename + ' complete')

def train_embeddings(iterationList, fileNameBase, folderDirectory, modelNameBase, modelDirectory, **kwargs):
  for iter in iterationList:
    start = time.time()
    filename = fileNameBase + str(iter) + '.txt'
    path = os.path.join(folderDirectory, filename)
    tempEmbedding=fasttext.train_unsupervised(path, **kwargs)
    modelName= modelNameBase + str(iter) + '.en.bin'
    modelPath = os.path.join(modelDirectory, modelName)
    tempEmbedding.save_model(modelPath)
    end = time.time()
    duration = end-start
    print('embedding for model ' + str(iter) +' is_saved')
    print('time spent: '+ str(duration))

def zip_models(iterationList, modelNameBase, modelDirectory, **kwargs):
  for iter in iterationList:
    modelName= modelNameBase + str(iter) + '.en.bin'
    modelPath = os.path.join(modelDirectory, modelName)
    zipName = modelName + '.zip'
    zipPath = os.path.join(modelDirectory, zipName)
    with zipfile.ZipFile(zipPath, 'w', **kwargs) as zf:
      zf.write(modelPath)
    print(modelName + ' is successfully compressed')